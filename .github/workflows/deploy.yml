name: Build & Deploy on Release

on:
  release:
    types: [published]

env:
  HUSKY: 0
  IMAGE_REGISTRY: ghcr.io
  NF_PROJECT_ID: hyperdemo
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    name: Build image
    runs-on: ubuntu-latest
    timeout-minutes: 10

    outputs:
      service: ${{ steps.parse.outputs.service }}
      version: ${{ steps.parse.outputs.version }}
      tags_semver: ${{ steps.parse.outputs.tags_semver }}
      tags_latest: ${{ steps.parse.outputs.tags_latest }}

    permissions:
      packages: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Parse tag (service + version)
        id: parse
        env:
          GIT_TAG: ${{ github.ref_name }}
          GIT_REPO: ${{ github.repository }}
        run: |
          SERVICE=$(echo "$GIT_TAG" | sed -E 's/-v[0-9]+\.[0-9]+\.[0-9]+$//')
          VERSION=$(echo "$GIT_TAG" | sed -E 's/^.+-//')
          TAG=$IMAGE_REGISTRY/$GIT_REPO/$SERVICE
          echo "service=$SERVICE" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tags_semver=$TAG:$VERSION" >> $GITHUB_OUTPUT
          echo "tags_latest=$TAG:latest" >> $GITHUB_OUTPUT

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ env.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: true
          file: services/${{ steps.parse.outputs.service }}/dockerfile
          context: .
          platforms: linux/amd64
          tags: |
            ${{ steps.parse.outputs.tags_semver }}
            ${{ steps.parse.outputs.tags_latest }}
          build-args: |
            APP_VERSION=${{ steps.parse.outputs.version }}

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 10

    permissions:
      packages: write
      contents: read

    strategy:
      matrix:
        deployments: [
          { name: "backend", service_id: "backend" },
          { name: "frontend", service_id: "frontend" },
        ]

    steps:
      - name: Deploy ${{ needs.build.outputs.service }}
        if: matrix.deployments.name == needs.build.outputs.service
        run: |
          curl --fail --location 'https://api.northflank.com/v1/projects/${{ env.NF_PROJECT_ID }}/services/${{ matrix.deployments.service_id }}/deployment' \
            -H "Authorization: Bearer ${{ secrets.NORTHFLANK_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "external": {
                "imagePath": "${{ needs.build.outputs.tags_semver }}",
                "credentials": "github"
              }
            }'


